#!/bin/bash
### argument parsing courtesy of https://argbash.io
die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}
_arg_port="9009"
print_help ()
{
  printf 'Usage: %s [-p|--port <arg>]\n' "$0"
  printf "\t%s\n" "-p,--port: port for toolshed listener (default: '"9009"')"
}
parse_commandline ()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -p|--port)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_port="$2"
        shift
        ;;
      --port=*)
        _arg_port="${_key##--port=}"
        ;;
      -p*)
        _arg_port="${_key##-p}"
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}
parse_commandline "$@"

### set up toolshed
if [ ! -d ~/shed ]; then
  mkdir ~/shed
fi
cd ~/shed
TARBALLURL=$( curl --silent https://api.github.com/repos/galaxyproject/galaxy/tags | grep tarball_url | head -n 1 | sed -e 's/.*https:/https:/; s/".*$//;' )
EXPECTED=$( echo $TARBALLURL | sed -e 's/.*[/]//' )
if [ -f $EXPECTED ]; then
  rm $EXPECTED
fi
if [ ! -f $EXPECTED.tgz ]; then
  echo downloading tarball: $TARBALLURL
  echo '
    Setting up a new toolshed.
    This involves both downloading files of significant size
    and significant computation subsequently.
    Please be patient.  Thank you.
  '
  wget $TARBALLURL
  mv $EXPECTED $EXPECTED.tgz
  tar xzf $EXPECTED.tgz
fi
if [ -d galaxyproject-galaxy-* ]; then
  mv galaxyproject-galaxy-* galaxyproject-galaxy
fi
TOOLSHEDYML=~/shed/galaxyproject-galaxy/config/tool_shed.yml
if [ ! -f $TOOLSHEDYML ]; then
  # spacing here is critical - no extra spaces or tabs permitted
  sed -e "s/http: 127.0.0.1:\([0-9]*\)/http: 0.0.0.0:$_arg_port/" $TOOLSHEDYML.sample > $TOOLSHEDYML
  grep 'static-map: static=static' $TOOLSHEDYML || sed -i -e '/uwsgi:/ {
  # do not change indentation here - it is critical to YAML format
  s/$/\
  static-map: \/static=static/
  }' $TOOLSHEDYML
  grep 'static-map: static\/style=static' $TOOLSHEDYML || sed -i -e '/uwsgi:/ {
  # do not change indentation here - it is critical to YAML format
  s/$/\
  static-map: \/static\/style=static\/style\/blue/
  }' $TOOLSHEDYML
fi

echo "
  Now you will want to:
    - Decide what email address you will want to register in the 
      'localshed' tool shed.
        e.g., john.doe@example.net
    - Add that email address to $TOOLSHEDYML
        e.g.,
          admin_users: john.doe@example.net
        ^^ Very important!  This line must begin with two spaces 
        and appear below "tool_shed:"
    - Run the toolshed with the command
        /run_shed
    - Browse to the port forwarded to the toolshed.
      - Probably this would be http://localhost:8709
      - Register as a user with the email address chosen previously.
      - Add the shed category (or categories) appropriate for your tool
      - Navigate to 'User > API Keys' and generate an API key.
      - Copy the API key.
    - Replace the API key under 'localshed' in ~/.planemo.yml with 
      the API key generated above.

  These changes will be persistent, so that the next time you run 
    /run_shed
  you will not need to repeat them.

  When '/run_shed' is running, you may run
    planemo shed_create -t localshed .
  from the directory containing your tool definition XML file.
"
# vim: ts=2 sw=2 et ai:
