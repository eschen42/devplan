#!/bin/bash
# One-time set up on the guest

# - Create virtual environment for pip
if [ ! -d ~/venv ]; then
  virtualenv ~/venv
  RESULT=$?
  HADVENV=0
else
  HADVENV=1
fi
if [ ! -d ~/venv ]; then
  echo "
    Failed to create ~/venv.
    Is it possible that the directory passed to the Docker
      container to persist /home/rstudio was created by root
      rather than an unprivileged user?
    If so, you will need to exit the container (using the)
      command 'exit' and restart it with a directory
      that is writable by an unprivileged user.
  "
  exit 1
fi

# - Activate (and confirm) the virtual environment
. ~/venv/bin/activate
if [ `which pip`_ != ~/venv/bin/pip_ ]; then
  echo "
    \$PATH=$PATH
    ~/venv/bin/pip is not the first pip on your path.
    You may want to 'rm -rf ~/venv' and try running '/setup_home' again.
  "
  exit 1
fi
if [ `which python`_ != ~/venv/bin/python_ ]; then
  echo "
    \$PATH=$PATH
    ~/venv/bin/python is not the first python on your path.
    You may want to 'rm -rf ~/venv' and try running '/setup_home' again.
  "
  exit 1
fi

# - Install planemo in the virtual environment using pip
which planmeo
if [ $? -ne 0 ]; then
  pip install planemo
  HADVENV=0
fi
if [ `which planemo`_ != ~/venv/bin/planemo_ ]; then
  echo "
    planemo did not install in ~/venv.
    Please check your network connection, then try running '/setup_home'
      again.  If that does not help, you may want to
      'rm -rf ~/venv' and try running '/setup_home' again.
  "
fi

# - Initialize conda from planemo
if [ `which planemo`_ != ~/venv/bin/planemo_ ]; then
  if [  -d  ~/miniconda3/bin/conda ]; then
    echo "
      ~/miniconda3/bin/conda already exists, so I won't run planemo conda_init
    "
  else
    planemo conda_init
    RESULT=$?
    if [ $RESULT -ne 0 ]; then
      rm -rf ~/miniconda3
      echo "
        Errors occurred while planemo was installing conda.
        Please check your network connection, then try running '/setup_home'
          again.  If that does not help, you may want to
          'rm -rf ~/venv' and try running '/setup_home' again.
      "
    fi
  fi
fi

# - set up ~/.profile
if [ ! -f ~/.profile ]; then

  echo "
    eval \`ssh-agent -s\`
    echo 'use ssh-add to add keys to the ssh-agent'

    stty -a | head -n 1
    ROWCOL=\"\$(stty -a | head -n 1 | grep columns | sed -n -e 's/speed [0-9]* baud; rows \([0-9]*\); columns \([0-9]*\);.*/export LINES=\1; export COLUMNS=\2 /; s/.*speed//; p')\"
    \$ROWCOL
  " | sed -e 's/^    //' > ~/.profile
fi

# - set up ~/.Rprofile
if [ ! -f ~/.Rprofile ]; then
  echo '.libPaths(c("~/R/library",.libPaths()))' > ~/.Rprofile
fi

# - set up ~/.bash_profile.d
if [ ! -d ~/.bash_profile.d ]; then
  mkdir ~/.bash_profile.d
  echo '
    . ~/.profile
    . ~/.bashrc
    if [ -f ~/.ssh/sshd.pid ]; then
      SSHDPID=$(cat ~/.ssh/sshd.pid)
      if [ $( test -d /proc/$SSHDPID && cat /proc/$SSHDPID/task/$SSHDPID/comm)_ != sshd_ ]; then
        echo removing defunct ~/.ssh/sshd.pid
        rm ~/.ssh/sshd.pid
      fi
    fi
    if [ ! -f ~/.ssh/sshd.pid ]; then
      function sshd_logout {
        echo "shutting down sshd"
        # this removes ~/.ssh/sshd.pid
        kill `cat ~/.ssh/sshd.pid`
      }
      # this creates ~/.ssh/sshd.pid
      /usr/sbin/sshd -f ~/.ssh/sshd_config
    else
      echo "sshd is already running"
      function sshd_logout {
        echo ""
      }
    fi
    function bash_logout {
      echo killing ssh agent $SSH_AGENT_PID
      kill $SSH_AGENT_PID
      echo "exiting login shell"
    }
    trap bash_logout EXIT
  ' | sed -e 's/^    //' > ~/.bash_profile.d/sshd_start
fi

# - set up ~/.bash_profile
if [ ! -f ~/.bash_profile ]; then
  echo '
    # source additional entries from files within ~/.bash_profile.d
    for f in ~/.bash_profile.d/*; do
        # echo Sourcing $f
        . $f
    done
  ' | sed -e 's/^    //' >> ~/.bash_profile
fi

# - set up ~/.bashrc.d
if [ ! -d ~/.bashrc.d ]; then
  mkdir ~/.bashrc.d
  echo '
    # source additional entries from files within ~/.bashrc.d
    for f in ~/.bashrc.d/*; do
        # echo Sourcing $f
        . $f
    done
  ' | sed -e 's/^    //' >> ~/.bashrc
  echo '
    EDITOR=vim; export EDITOR
  ' | sed -e "s/^    //" >> ~/.bashrc.d/env
  echo '
    # set vi/readline for shell
    set -o vi

    # set the venv
    . ~/venv/bin/activate
  ' | sed -e 's/^    //' >> ~/.bashrc.d/setup
  echo '
    # alias xd uses od in byte-wise hex-dump format; this is a slight variant on xxd
    alias xd="od -A x -t x1z -v"

    # implement the classic Unix rehash command
    alias rehash="hash -r"

    # show a treelist of processes including PID and command line
    alias pstree="pstree -a -p"

    # show a ruler for 200 columns
    alias ruler="echo {0,1,2,3,4,5,6,7,8,9}----+--- {0,1,2,3,4,5,6,7,8,9}----+---"
  ' | sed -e 's/^    //' >> ~/.bashrc.d/alias
fi

# - Set up .Rprofile and local library
if [ ! -d ~/lib/R ]; then
  mkdir -p ~/lib/R
fi
if [ -f ~/.Rprofile ]; then
  echo '
    .libPaths( c( "~/lib/R", .libPaths() ) )
  ' | sed -e 's/^    //' >> ~/.Rprofile
fi

##### user prompts for git, ssh, and planemo access

# - Set up ssh for access to git
if [ ! -d ~/.ssh ]; then
  mkdir ~/.ssh
fi
if [ ! -f ~/.ssh/id_rsa ]; then
  touch ~/.ssh/id_rsa
  echo '
    TODO: If you want to access git over ssh, then you may want
      - either to create new ~/.ssh/id_rsa using "ssh-keygen"
      - or to copy an existing private key to ~/.ssh/id_rsa
    and then "chmod 700 ~/.ssh/id_rsa".
  ' | sed -e 's/^    //'
fi
chmod 700 ~ ~/.ssh
chmod 600 ~/.ssh/id_rsa

# - set up user-mode sshd
echo '# setting up user-mode sshd'

pushd ~/.ssh
ssh-keygen -f ssh_host_rsa_key     -N '' -t dsa
ssh-keygen -f ssh_host_ecdsa_key   -N '' -t ecdsa
ssh-keygen -f ssh_host_ed25519_key -N '' -t ed25519
cp /sshd_config .
popd

# - prompt setup for git
if [ ! -f ~/.gitconfig ]; then
  echo '
    You may want to set up global info for git, e.g.:
    git config --global --add user.name "John Doe"
    git config --global --add user.email "jdoe@example.net"
  ' | sed -e 's/^    //'
fi

# - prompt setup for planemo
if [ ! -f ~/.planemo.yml ]; then
  echo '
    ## Planemo Global Configuration File.
    ## Everything in this file is completely optional - these values can all be
    ## configured via command line options for the corresponding commands.

    ## Please note that this is a YAML file, so exact indentation is important.

    ## Specify a default galaxy_root for test and server commands here.
    #galaxy_root: /path/to/galaxy_root

    ## Specify github credentials for publishing gist links (e.g. with
    ## the `share_test` command).
    github:
      username: yourGitHubUserID
      password: yourGitHubPassword

    ## Username used with toolshed(s).
    shed_username: "yourToolshedUserID"
    sheds:
      # For each tool shed you wish to target, uncomment key or both email and
      # password.
      toolshed:
        #key: "<TODO>"
        #email: "<TODO>"
        #password: "<TODO>"
      testtoolshed:
        #key: "<TODO>"
        #email: "<TODO>"
        #password: "<TODO>"
      localshed:
        key: "1e9b0f7d3a960d849da2b09ca18922b5"
        url: "http://127.0.0.1:9009/"
        #email: "<TODO>"
        #password: "<TODO>"
  ' | sed -e 's/^    //' > ~/.planemo.yml
  chmod 600 ~/.planemo.yml
  echo '
    Please update your credentials into ~/.planemo.yml
  ' | sed -e 's/^    //'
fi

if [ $HADVENV -eq 0 ]; then
  echo '
    To make your changes effective, run
      bash -l
    or log out and then log in.

    You only have to do this once.

    If you want to run a toolshed, run
      /setup_shed
    as follows:
  ' | sed -e 's/^    //'
  /setup_shed --help | sed -e 's/^/  /'
fi
# vim: sw=2 ts=2 et ai :
