#!/bin/bash
### argument parsing courtesy of https://argbash.io
# ARG_OPTIONAL_SINGLE([port], p, [port for toolshed listener], [9009])
# ARG_OPTIONAL_SINGLE([admin], a, [email for admin user, separate multiple emails with commas], [admin@galaxy.org])
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([])
# ARGBASH_GO()
die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}
print_help ()
{
  printf 'Usage: %s [-p|--port <arg>] [-a|--admin <arg>] [-h|--help]\n' "$0"
  printf "\t%s\n" "-p,--port: port for toolshed listener (default: '9009')"
  printf "\t%s\n" "-a,--admin: email for admin user, separate multiple emails with commas (default: 'admin@galaxy.org')"
  printf "\t%s\n" "-s,--sheduser: username for toolshed (no default!)"
  printf "\t%s\n" "-u,--url: URL for toolshed listener, without port (default: 'http://localhost')"
  printf "\t%s\n" "-r,--shedroot: Path at which to create the tool shed (default: '~/shed')"
  printf "\t%s\n" "-h,--help: Prints help"
}
_arg_shedroot="~/shed"
_arg_url="http://localhost"
_arg_port="9009"
_arg_admin="admin@galaxy.org"
_arg_sheduser_default="no_default"
_arg_sheduser=$_arg_sheduser_default
_secret=`python -c 'import time; print time.time()' | md5sum | cut -f 1 -d ' '`
parse_commandline ()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      # SHEDUSER
      -s|--sheduser)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_sheduser="$2"
        shift
        ;;
      --sheduser=*)
        _arg_sheduser="${_key##--sheduser=}"
        ;;
      -s*)
        _arg_sheduser="${_key##-s}"
        ;;
      # ROOT
      -r|--shedroot)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_shedroot="$2"
        shift
        ;;
      --shedroot=*)
        _arg_shedroot="${_key##--shedroot=}"
        ;;
      -r*)
        _arg_shedroot="${_key##-r}"
        ;;
      # URL
      -u|--url)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_url="$2"
        shift
        ;;
      --url=*)
        _arg_url="${_key##--url=}"
        ;;
      -u*)
        _arg_url="${_key##-u}"
        ;;
      # PORT
      -p|--port)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_port="$2"
        shift
        ;;
      --port=*)
        _arg_port="${_key##--port=}"
        ;;
      -p*)
        _arg_port="${_key##-p}"
        ;;
      # ADMIN
      -a|--admin)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_admin="$2"
        shift
        ;;
      --admin=*)
        _arg_admin="${_key##--admin=}"
        ;;
      # HELP
      -h|--help)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes
        die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}
parse_commandline "$@"
# remove quotes if any from _arg_shedroot to complete expansion of tilde
_arg_shedroot=`echo $_arg_shedroot |  sed -e "s#[~]#$HOME#"`

if [ "$_arg_sheduser" == "$_arg_sheduser_default" ]; then
  echo missing mandatory argument --sheduser
  print_help
  exit 1
fi

### set up toolshed
if [ -d $_arg_shedroot ]; then
  cd $_arg_shedroot
else
  mkdir $_arg_shedroot
  cd $_arg_shedroot
  TARBALLURL=$( curl --silent https://api.github.com/repos/galaxyproject/galaxy/tags | grep tarball_url | head -n 1 | sed -e 's/.*https:/https:/; s/".*$//;' )
  EXPECTED=$( echo $TARBALLURL | sed -e 's/.*[/]//' )
  if [ -f $EXPECTED ]; then
    rm $EXPECTED
  fi
  if [ ! -f $EXPECTED.tgz ]; then
    echo downloading tarball: $TARBALLURL
    echo '
      Setting up a new toolshed.
      This involves both downloading files of significant size
      and significant computation subsequently.
      Please be patient.  Thank you.
    '
    wget $TARBALLURL
    mv $EXPECTED $EXPECTED.tgz
    tar xzf $EXPECTED.tgz
    if [ -d galaxyproject-galaxy-* ]; then
      mv galaxyproject-galaxy-* galaxyproject-galaxy
    fi
  fi
fi
if [ ! -d galaxyproject-galaxy ]; then
  echo Error - cannot find toolshed files expected at `pwd`/galaxyproject-galaxy - aborting
  exit 1
fi
TOOLSHEDYML=$_arg_shedroot/galaxyproject-galaxy/config/tool_shed.yml
PLANEMOYML=~/.planemo.yml
if [ ! -f $TOOLSHEDYML ]; then
  TOOLSHEDYMLSRC=$_arg_shedroot/galaxyproject-galaxy/config/tool_shed.yml.sample
else
  cp $TOOLSHEDYML $TOOLSHEDYML.old
  TOOLSHEDYMLSRC=$TOOLSHEDYML.old
fi


# Indentation here is critical - no extra spaces or tabs permitted
# Listen globally (0.0.0.0), not just in container (127.0.0.1) for connections to tool shed
sed -e "s/http: 127.0.0.1:\([0-9]*\)/http: 0.0.0.0:$_arg_port/" $TOOLSHEDYMLSRC > $TOOLSHEDYML
if [ $TOOLSHEDYMLSRC != $TOOLSHEDYML.old ]; then
  # Set if unset in tool_shed.yml - static-map: /static=static
  grep 'static-map: static=static' $TOOLSHEDYML || sed -i -e '/uwsgi:/ {
  # do not change indentation here - it is critical to YAML format
  s/$/\
  static-map: \/static=static/
  }' $TOOLSHEDYML
  # Set if unset in tool_shed.yml - static-map: /static/style=static/style/blue
  grep 'static-map: static\/style=static' $TOOLSHEDYML || sed -i -e '/uwsgi:/ {
  # do not change indentation here - it is critical to YAML format
  s/$/\
  static-map: \/static\/style=static\/style\/blue/
  }' $TOOLSHEDYML
fi

# Set admin users as supplied if supplied
sed -i -e "
  s/#id_secret: .*/id_secret: $_secret/;
  /#admin_users:/ s/#admin_users/admin_users/
  /admin_users: .*/ s/admin_users: .*/admin_users: $_arg_admin/
" $TOOLSHEDYML

# Update ~/.planemo.yml to point localshed to this toolshed
sed -i -e "/^  localshed:\$/,/^  [a-zA-Z]/ {
  s?url: .*?url: \"$_arg_url:$_arg_port/\"?
}" $PLANEMOYML

#shed_username: "demouser"
sed -i -e "
  s/^shed_username.*/shed_username: \"$_arg_sheduser\"/
" $PLANEMOYML







sed -i -e "
  s#SHED_ROOT=.*#SHED_ROOT='$_arg_shedroot'#
  s/SHED_PORT=.*/SHED_PORT='$_arg_port'/
  s/SHED_USERNAME=.*/SHED_USERNAME='$_arg_sheduser'/
  s/SHED_USEREMAIL=.*/SHED_USEREMAIL='$_arg_admin'/
" ~/.bashrc.d/rstudio

echo "
  The shed is now set up.
    - The email address(es) of the admin user(s) are defined
      in $TOOLSHEDYML as
        $_arg_admin
  Now you will want to:
    - Run the toolshed with the command
        /run_shed
    - Browse to the port forwarded to the toolshed.
      - Ideally, this would be http://localhost:$_arg_port
      - Register as a user with the email address
          $_arg_admin
      - Add the shed category (or categories) appropriate for your tool
      - Navigate to 'User > API Keys' and generate an API key.
      - Copy the API key.
    - Replace the API key under 'localshed' in ~/.planemo.yml with
      the API key generated above, and make sure that the port for
      the URL is set to $_arg_port.

  These changes will be persistent, so that the next time you run
    /run_shed
  you will not need to repeat them.

  When '/run_shed' is running, you may run
    planemo shed_create -t localshed .
  from the directory containing your tool definition XML file.
"
# vim: ts=2 sw=2 et ai:
