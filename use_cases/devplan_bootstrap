#!/bin/bash
##
## # Use cases for container setup
##
## You can automate the set-up of the Docker container on the Docker host by running the `use_cases/devplan_bootstrap` script.
## You probably don't want to run the script as root.
##
## Set some environment variables in a file (e.g., `localhost.custom`), and then invoke the script.  There are several examples to choose from.  For example:
## ```
## git clone git@github.com:eschen42/devplan.git
## cd devplan/use_cases
## cp localhost.example localhost.custom
## # edit localhost.custom to customize as desired
## source devplan_bootstrap localhost.custom
## # To run the container with docker-compose:
## run_compose_rstudio
## To run the container with docker:
## run_docker_rstudio
## ```
##
## Here are the environment variables used by the `use_cases/devplan_bootstrap` script:
## - PASSWORD - password for rstudio-server for user `rstudio` (required)
## - IMAGE - The name of the desired Docker image (default: eschen42/devplan:alpha),
##   - local image-name (try `docker images`)
##   - published image-name (search at https://hub.docker.com/r/eschen42/devplan/tags/)
## - CONTAINER - the name of the container to be running the image (default: rstudio)
## - DOCKER - command to run docker (default: docker)
##    - If you are not in the group docker, set `DOCKER="sudo docker"` before sourcing `devplan_bootstrap`
## - HOMEDIR - path to host folder; if it does not exist it will be created
## - HOSTINTERFACE - interface where listeners will listen (default: 127.0.0.1)
##   - 0.0.0.0 will listen to connections from anywhere (security risk)
##   - 127.0.0.1 will listen to connection requests only from the local machine
## - PREFIX - all but the last two digits of the port numbers on which listeners will listen (default:88)
## - SHED_USERNAME - ID for user in the `localshed` toolshed (default: demouser)
## - SHED_USEREMAIL - email for user in the `localshed` toolshed (default: demouser@example.net)
## - SHED_URL - URL for the `localshed` toolshed (default: http://localhost)
##   - Try to ensure that this URL will resolve in both the container and in a user's web browser
## - SHED_PORT - PORT for the `localshed` toolshed (default: 8888)
##   - Try to ensure that this PORT will resolve in both the container and in a user's web browser
## - PLANEMO_SERVE_PORT - PORT for connecting to web server for `planemo serve` (default: 8890)
## - PLANEMO_SHED_SERVE_PORT - PORT for connecting to web server for `planemo shed_serve` (default: 8889)

# To view the header of this file as markdown, run `sed -n -e '/^##/ !d; /./!d; s/^## //; s/^##$//; p' devplan_bootstrap`

if [ $# -gt 0 ]; then
  source $*
fi

echo PASSWORD is now set to \"${PASSWORD}\" 1>&2

#  ######## START OF CONFIGURATION-VARIABLES SECTION ########

# PASSWORD - password for rstudio-server for user 'rstudio'
PASSWORD=${PASSWORD:?'set PASSWORD to the password of the user rstudio for logging into RStudio'}

# IMAGE - The name of the desired Docker image,
#   - either local (try 'docker images')
#   - or remote (search at hub.docker.com)
IMAGE=${IMAGE:-eschen42/devplan:alpha}

# CONTAINER - the name of the container to be running the image
CONTAINER=${CONTAINER:-rstudio}

# DOCKER - If you aren't in the group docker, set DOCKER="sudo docker" before running this script
DOCKER=${DOCKER:-docker}
DOCKRUN="${DOCKER} run"

# HOMEDIR - path to host folder; if it does not exist it will be created
HOMEDIR=${HOMEDIR:-~/devplan}

# HOSTINTERFACE - interface where listeners will listen
#   - 0.0.0.0 will listen to connections from anywhere (security risk)
#   - 127.0.0.1 will listen to connection requests only from the local machine
HOSTINTERFACE=${HOSTINTERFACE:-127.0.0.1}

# PREFIX - all but the last two digits of the port numbers on which listeners will listen
PREFIX=${PREFIX:-88}

# SHED_USERNAME - ID for user in the 'localshed' toolshed
SHED_USERNAME=demouser

# SHED_USEREMAIL - email for user in the 'localshed' toolshed
SHED_USEREMAIL=${SHED_USEREMAIL:-demouser@example.net}

# SHED_URL - URL for the 'localshed' toolshed
#   - Try to ensure that this URL will resolve in both the container and in a user's web browser
SHED_URL=${SHED_URL:-http://localhost}

# SHED_PORT - PORT for the 'localshed' toolshed
#   - Try to ensure that this PORT will resolve in both the container and in a user's web browser
SHED_PORT=${SHED_PORT:-${PREFIX}88}

# PLANEMO_SERVE_PORT - PORT for connecting to web server for 'planemo serve'
PLANEMO_SERVE_PORT=${PLANEMO_SERVE_PORT:-${PREFIX}90}

# PLANEMO_SHED_SERVE_PORT - PORT for connecting to web server for 'planemo shed_serve'
PLANEMO_SHED_SERVE_PORT=${PLANEMO_SHED_SERVE_PORT:-${PREFIX}89}

#  ######## END OF CONFIGURATION-VARIABLES SECTION ########

# ref: https://stackoverflow.com/a/246128 -- begin
SOURCE="${BASH_SOURCE[0]}"
echo PASSWORD is initially set to \"${PASSWORD}\" 1>&2
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
# ref: https://stackoverflow.com/a/246128 -- end

# be sure that the specified image is up-to-date
if [ $IMAGE != devplan ]; then
  $DOCKER pull $IMAGE 1>&2
fi

# DEVPLAN - most of the resource mappings needed for 'docker run'
DEVPLAN="
  $DOCKRUN
    --rm -d
    -e PASSWORD=${PASSWORD}
    -v ${HOMEDIR}:/home/rstudio
    -p ${HOSTINTERFACE}:${PREFIX}87:8787
    -p ${HOSTINTERFACE}:${SHED_PORT}:${SHED_PORT}
    -p ${HOSTINTERFACE}:${PLANEMO_SHED_SERVE_PORT}:${PLANEMO_SHED_SERVE_PORT}
    -p ${HOSTINTERFACE}:${PLANEMO_SERVE_PORT}:${PLANEMO_SERVE_PORT}
    --name ${CONTAINER}
    $IMAGE
"
DEVCOMPOSE="version: '3'
services:
  ${CONTAINER}:
    environment:
      - PASSWORD=${PASSWORD}
    ports:
      - ${HOSTINTERFACE}:${PREFIX}87:8787
      - ${HOSTINTERFACE}:${SHED_PORT}:${SHED_PORT}
      - ${HOSTINTERFACE}:${PLANEMO_SHED_SERVE_PORT}:${PLANEMO_SHED_SERVE_PORT}
      - ${HOSTINTERFACE}:${PLANEMO_SERVE_PORT}:${PLANEMO_SERVE_PORT}
    volumes:
     - ${HOMEDIR}:/home/rstudio
    container_name: ${CONTAINER}
    image: \"${IMAGE}\"
    command: exec /init su -l -c 'tail -f /dev/null' rstudio
"

# set up home directory and tool shed if the home directory does not exist on the host
if [ ! -d ${HOMEDIR} ]; then
  (
    # make home directory on the host - this is to ensure that the UID and GUID are correct within the guest
    mkdir -p ${HOMEDIR}
    mkdir -p ${HOMEDIR}/kitematic
    if [ `whoami` == root ]; then
      chown 1000:1000 ${HOMEDIR}
      chown 1000:1000 ${HOMEDIR}/kitematic
    fi
    # run homeshed_global script as rstudio
    $DOCKRUN --name ${CONTAINER} --rm -i --user rstudio -v ${HOMEDIR}:/home/rstudio $IMAGE bash -c "\
      PREFIX=$PREFIX \
      SHED_URL=$SHED_URL \
      SHED_USERNAME=$SHED_USERNAME \
      SHED_USEREMAIL=$SHED_USEREMAIL \
      SHED_PORT=$SHED_PORT \
      SHED_URL=$SHED_URL \
      PLANEMO_SERVE_PORT=$PLANEMO_SERVE_PORT \
      PLANEMO_SHED_SERVE_PORT=$PLANEMO_SHED_SERVE_PORT \
      /setup_homeshed \
    "
  ) 1>&2
else
  echo "Not re-initializing pre-existing directory ${HOMEDIR}" 1>&2
fi

echo export DEVPLAN="\"$DEVPLAN\""
cat > ${CONTAINER}-compose.yml << EOF
${DEVCOMPOSE}
EOF

echo Written to ${CONTAINER}-compose.yml: 1>&2
cat ${CONTAINER}-compose.yml 1>&2

run_docker_rstudio()
{
  echo $DEVPLAN exec /init su -l -c 'tail -f /dev/null' rstudio
  $DEVPLAN exec /init su -l -c 'tail -f /dev/null' rstudio
  # Print this message when the run_docker_studio function is invoked
  echo Now a container named \'${CONTAINER}\' should be listed when you run \'docker ps\'
  echo To stop the container: docker stop ${CONTAINER}
}

RUNCOMPOSERSTUDIOFILE=$DIR/${CONTAINER}.tmp
cat > $RUNCOMPOSERSTUDIOFILE << EOF
run_compose_rstudio()
{
  # change FOO=bar to FOO='bar'
  # change FOO=foo'bar to FOO='foo'"'"'bar'
  $( printenv | sed -e "s/'/'\"'\"'/g; s/^\([^=]*\)=\(.*\)/\1='\2'/" )
  if [ -f ${CONTAINER}-extend.yml ]; then
    EXTEND='-f ${CONTAINER}-extend.yml'
    echo 'FYI - ${CONTAINER}-extend.yml WAS found'
    cat ${CONTAINER}-compose.yml ${CONTAINER}-extend.yml
  else
    EXTEND=''
    echo 'FYI - ${CONTAINER}-extend.yml was NOT found'
    cat ${CONTAINER}-compose.yml
  fi
  docker-compose -f ${CONTAINER}-compose.yml \$EXTEND up -d
  # Print this message when the run_compose_rstudio function is invoked
  echo Now a container named \'${CONTAINER}\' should be listed when you run \'docker ps\'
  echo "$COMPOSEMSG"
  echo "To stop the container:"
  echo "  docker-compose -f ${CONTAINER}-compose.yml down"
  echo "or:"
  echo "  stop_compose_rstudio"
}
stop_compose_rstudio()
{
  docker-compose -f ${CONTAINER}-compose.yml down
}
EOF

# echo about to source run_compose_rstudio 1>&2
# echo "$RUNCOMPOSERSTUDIO" 1>&2
# sleep 1
echo sourcing run_compose_rstudio 1>&2
source $RUNCOMPOSERSTUDIOFILE
# sleep 1
echo sourced run_compose_rstudio 1>&2
# echo post-sourcing set BEGIN 1>&2
# set 1>&2
# echo post-sourcing set END 1>&2

echo "
To run the container, type
  source devplan_bootstrap $*; run_docker_rstudio
and press ENTER.

Or, to run using docker-compose, type
  source devplan_bootstrap $*; run_compose_rstudio
and press ENTER.
" 1>&2

# vim: sw=2 ts=2 et :
